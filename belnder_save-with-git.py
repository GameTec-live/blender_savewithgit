bl_info = {
    "name": "Save with Git",
    "author": "GameTec_live",
    "version": (1, 0),
    "blender": (2, 80, 0),
    "location": "File > Save with Git",
    "description": "Saves the file and puts it into Git",
    "warning": "",
    "doc_url": "",
    "category": "File",
}


branch = 'main' #github branch
local_dir = 'C:/localgit' #the folder with the local git repository  ABSOLUTE PATH!



import bpy
from bpy.types import Operator, Menu
from bpy.props import FloatVectorProperty
from bpy_extras.object_utils import AddObjectHelper, object_data_add
from mathutils import Vector
import rna_keymap_ui
import subprocess
import os

PIPE = subprocess.PIPE
os.chdir(local_dir)

def save_git(self, context):
    os.chdir(local_dir)
    bpy.ops.wm.save_as_mainfile(filepath=local_dir + "main.blend")
    process = subprocess.Popen(['git', 'commit', "-m", '"autogenerated commit"'], stdout=PIPE, stderr=PIPE)
    stdoutput, stderroutput = process.communicate()
    if 'fatal' in stdoutput:
        print("error processing git")
        exit(0)
    else:
        pass
    process = subprocess.Popen(['git', 'push', "-u", branch], stdout=PIPE, stderr=PIPE)
    stdoutput, stderroutput = process.communicate()
    if 'fatal' in stdoutput:
        print("error processing git")
        exit(0)
    else:
        pass


class save_with_git(Operator, AddObjectHelper):
    bl_idname = "save.save_with_git"
    bl_label = "Save with Git"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):
        save_git(self, context)
        return {'FINISHED'}


# Registration
def add_object_button(self, context):
    self.layout.operator(
        save_with_git.bl_idname,
        text="Save with Git",
        icon='FILE_TICK')


class Preferences(AddonPreferences):
    # this must match the add-on name, use '__package__'
    # when defining this in a submodule of a python package.
    bl_idname = __name__

    filepath: StringProperty(
        name="Example File Path",
        subtype='FILE_PATH',
    )
    number: IntProperty(
        name="Example Number",
        default=4,
    )
    boolean: BoolProperty(
        name="Example Boolean",
        default=False,
    )

    def draw(self, context):
        layout = self.layout
        layout.label(text="This is a preferences view for our add-on")
        layout.prop(self, "filepath")
        layout.prop(self, "number")
        layout.prop(self, "boolean")


#autosaveing
def every_300_seconds():
    save_git()
    return 300.0





addon_keymaps = []


def register():
    bpy.utils.register_class(save_with_git)
    bpy.types.TOPBAR_MT_file.append(add_object_button)
    
    wm = bpy.context.window_manager
    kc = wm.keyconfigs.addon
    if kc:
        km = wm.keyconfigs.addon.keymaps.new(name='3D View', space_type='VIEW_3D')
        kmi = km.keymap_items.new(save_with_git.bl_idname, type='W', value='PRESS', ctrl=True)
        addon_keymaps.append((km, kmi))
    #comment the line below to disable autosaveing every 5 minutes
    bpy.app.timers.register(every_300_seconds)
    



def unregister():
    bpy.utils.unregister_class(save_with_git)
    bpy.types.TOPBAR_MT_file.remove(add_object_button)
    
    for km, kmi in addon_keymaps:
        km.keymap_items.remove(kmi)
    addon_keymaps.clear()


if __name__ == "__main__":
    register()
